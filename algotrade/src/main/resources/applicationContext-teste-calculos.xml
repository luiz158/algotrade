<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
 	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.0.xsd
http://www.springframework.org/schema/task
http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<context:annotation-config />

	<context:component-scan base-package="br.com.algotrade">
		     <context:include-filter type="aspectj" expression="*" />
	</context:component-scan>
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- Agendamento -->
	<task:annotation-driven executor="executorWithPoolSizeRange" scheduler="taskScheduler"/>
	<!--
   The 'executor' element:
   When a task is submitted, the executor will first
   try to use a free thread if the number of active threads is currently less than
   the core size. If the core size has been reached, then the task will be added
   to the queue as long as its capacity has not yet been reached. Only then,
   if the queue's capacity has been reached, will the executor create a new
   thread beyond the core size. If the max size has also been reached, then
   the executor will reject the task
   See: 25.4.2 The 'executor' element -->
 <!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, queue-capacity, keep-alive,
    and rejection-policy values. The id becomes the default thread name prefix -->
 <task:executor id="executorWithPoolSizeRange"
                pool-size="5-25"
                queue-capacity="100"/>
   
  <!-- Defines a ThreadPoolTaskScheduler instance with configurable pool size.
    The id becomes the default thread name prefix. -->             
  <task:scheduler id="taskScheduler" pool-size="1"/> 
	<!-- Fim Agendamento -->
	
	<tx:annotation-driven transaction-manager="meuTransactionManager" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="file:**/resources/META-INF/persistence-teste-calculos.xml" />
		<property name="persistenceUnitName" value="algotrade-teste-calculos" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
	</bean>

	<bean id="meuTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
</beans>